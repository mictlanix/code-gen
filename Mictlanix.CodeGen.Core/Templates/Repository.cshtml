using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Threading.Tasks;
using @(Model.Namespace).Common;
using @(Model.Namespace).Entities;
using Dapper;
@{
	var key = "";
	var columns = "";
	var columns_aliases = "";
	var key_obj = "";
	var key_params = "";
	var prop_params = "";
	var set_clause = "";
	var where_clause = "";

	foreach (var prop in Model.Properties) {
		if (prop.Name == "Name" || prop.Name == "Status") {
			prop.IsFilter = true;
		}

		if (columns.Length > 0) {
			columns += ", ";
			columns_aliases += ", ";
			prop_params += ", ";
		}

		columns += "`" + prop.Column + "`";
		prop_params += "@" + prop.Name;
		columns_aliases += "`" + prop.Column + "` `" + prop.Name + "`";

		if (prop.IsPrimaryKey) {
			if (key_obj.Length > 0) {
				key_obj += ", ";
				key_params += ", ";
				where_clause += " AND ";
			}

			key_obj += prop.Name + " = " + prop.ArgumentName;
			key_params += prop.Type + " " + prop.ArgumentName;
			where_clause += "`" + prop.Column + "` = @" + prop.Name;
		} else {
			if (set_clause.Length > 0) {
				set_clause += ", ";
			}

			set_clause += "`" + prop.Column + "` = @" + prop.Name;
		}
	}
}

namespace @(Model.Namespace).DAL.Repositories {
	public partial class @(Model.PluralName)Repository : RepositoryBase, I@(Model.PluralName)Repository {
		internal const string query_columns = "@columns_aliases";
		internal const string query_count = "SELECT COUNT(*) FROM `@Model.Table`";
		internal const string query_all = "SELECT " + query_columns + " FROM `@Model.Table`";
		internal const string query_find = "SELECT " + query_columns + " FROM `@Model.Table` WHERE @where_clause";
@foreach (var prop in Model.Properties) {
	if (prop.IsFilter) {
<text>		internal const string query_find_@prop.Column = "SELECT " + query_columns + " FROM `@Model.Table` WHERE @prop.Column = @@@prop.Name";
</text>
	}
}
		internal const string query_add = "INSERT INTO `@Model.Table` (@columns) " + 
						  "VALUES (@prop_params)";
		internal const string query_update = "UPDATE `@Model.Table` SET @set_clause " + 
						     "WHERE @where_clause";
		internal const string query_delete = "DELETE FROM `@Model.Table` WHERE @where_clause";

		public @(Model.PluralName)Repository (DbConnection connection) : base (connection)
		{
		}

		public @(Model.PluralName)Repository (DbTransaction transaction) : base (transaction)
		{
		}

		public async Task<int> CountAsync ()
		{
			return await Connection.ExecuteScalarAsync<int> (query_count, transaction: Transaction).ConfigureAwait (false);
		}

		public async Task<IList<@(Model.Name)>> AllAsync ()
		{
			var query = await Connection.QueryAsync<@(Model.Name)> (query_all, transaction: Transaction).ConfigureAwait (false);
			return query.ToList ();
		}

		public async Task<@(Model.Name)> FindAsync (@key_params)
		{
			var query = await Connection.QueryAsync<@(Model.Name)> (query_find, new { @key_obj }, transaction: Transaction).ConfigureAwait (false);
			return query.FirstOrDefault ();
		}

@foreach (var prop in Model.Properties) {
	if (prop.IsFilter) {
<text>		public async Task@(Raw("<"))IList<@(Model.Name)>> FindBy@(prop.Name)Async (@prop.Type @prop.ArgumentName)
		{
			var query = await Connection.QueryAsync<@(Model.Name)> (query_find_@prop.Column, new { @prop.Name = @prop.ArgumentName }, transaction: Transaction).ConfigureAwait (false);
			return query.ToList ();
		}

</text>
	}
}
		public async Task<int> AddAsync (@(Model.Name) entity)
		{
			return await Connection.ExecuteAsync (query_add, entity, transaction: Transaction).ConfigureAwait (false);
		}

		public async Task<int> UpdateAsync (@(Model.Name) entity)
		{
			return await Connection.ExecuteAsync (query_update, entity, transaction: Transaction).ConfigureAwait (false);
		}

		public async Task<int> DeleteAsync (@key_params)
		{
			return await Connection.ExecuteAsync (query_delete, new { @key_obj }, transaction: Transaction).ConfigureAwait (false);
		}

		public async Task<int> DeleteAsync (@(Model.Name) entity)
		{
			return await Connection.ExecuteAsync (query_delete, entity, transaction: Transaction).ConfigureAwait (false);
		}
@foreach (var method in Model.Methods) {
	if(method.IsSingleResult) {
<text>
		public async Task<@Raw(method.Type)> @(method.Name)Async (@Raw(method.Arguments))</text>
	} else {
<text>
		public async Task@(Raw("<"))List<@Raw(method.Type)>> @(method.Name)Async (@Raw(method.Arguments))</text>
	}
<text>
		{
			var query = await Connection.QueryAsync<@Raw(method.Type)> ("@Raw(method.Query.Replace ("{{columns}}", columns_aliases))", new { @method.Initializers }, transaction: Transaction).ConfigureAwait (false);
</text>
	if(method.IsSingleResult) {	
<text>			return query.FirstOrDefault ();</text>
	} else {
<text>			return query.ToList ();</text>
	}
<text>
		}
</text>
}
	}
}
